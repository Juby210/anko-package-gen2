package main

import (
	"flag"
	"fmt"
	"go/format"
	"log"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
	"unicode"
)

const template = `
// Code generated by anko-package-gen2 %s. DO NOT EDIT.

package packages

import (
	"reflect"
	
	"github.com/mattn/anko/env"

%s)

func init() {
%s}
%s`

var (
	pkg  = flag.String("pkg", "", "Package")
	ver  = flag.String("v", "", "Version")
	name = flag.String("name", "", "Name")
	o    = flag.String("o", "anko-packages", "Output dir")
)

func main() {
	flag.Parse()

	if *pkg == "" {
		log.Fatal("Missing required argument: pkg (Package)")
	}
	if *ver == "" {
		log.Fatal("Missing required argument: v (Version)")
	}
	if *name == "" {
		log.Fatal("Missing required argument: name")
	}

	_pkg := *pkg
	for _, r := range _pkg {
		if unicode.IsUpper(r) {
			_pkg = strings.Replace(_pkg, string(r), "!"+string(unicode.ToLower(r)), 1)
		}
	}

	_name := strings.Title(*name)

	importBuf := ""
	initBuf := ""
	srcBuf := ""

	goMod, err := goEnv("GOMODCACHE")
	if err != nil {
		log.Fatal(err)
	}

	err = filepath.Walk(filepath.Join(goMod, _pkg+"@"+*ver), func(path string, f os.FileInfo, err error) error {
		if err != nil {
			return err
		}

		if strings.HasSuffix(f.Name(), "internal") {
			return filepath.SkipDir
		}

		if f.IsDir() {
			_dir := strings.Replace(path, goMod, "", 1)[1:]
			_path := strings.Replace(strings.Replace(strings.ReplaceAll(_dir, "\\", "/"), "@"+*ver, "", 1), _pkg, *pkg, 1)
			__init := strings.Split(_path, *pkg)
			_init := _name
			if len(__init) > 1 {
				_init += strings.ReplaceAll(strings.Title(__init[1]), "/", "")
			}
			src, err := exportDeclaration(goMod, _path, _dir, _init)
			if err != nil {
				log.Fatal(err)
			}
			if src != "" {
				importBuf += fmt.Sprintf("\t\"%s\"\n", _path)
				initBuf += fmt.Sprintf("\tinit%s()\n", _init)
				srcBuf += src
			}
		}

		return nil
	})
	if err != nil {
		log.Fatal(err)
	}

	src, err := format.Source([]byte(fmt.Sprintf(template[1:], strings.Join(os.Args[1:], " "), importBuf, initBuf, srcBuf)))
	if err != nil {
		log.Fatal(err)
	}
	// print and save code
	fmt.Println(string(src))
	os.MkdirAll(*o, 0777)
	os.WriteFile(filepath.Join(*o, *name+".go"), src, 0644)
}

func goEnv(name string) (string, error) {
	output, err := exec.Command("go", "env", name).CombinedOutput()
	if err != nil {
		return "", err
	}
	return strings.TrimSpace(string(output)), nil
}
